ModelAndViewContainer
	defaultModel:默认的数据源
	redirectModel:重定向的数据源
	sessionStatus:@SessionAttributes的状态(isComplete(session对应的值remove))
	requestHandled:请求的响应处理标示
	redirectModelScenario:重定向标示
	ignoreDefaultModelOnRedirect:重定向时忽略默认的数据源标示
	false(不忽略)。当redirectModel为空，redirectModelScenario为true时。还是可以使用defaultModel
	
	
	1.defaultMode+controller(Model)
		BindingResult.name->BindingResult
	2.setView(name,view)
	3.RedirectAttributes时，把相应值暴露到FlashMap
	4.如果view为空,viewNameTranslator解析
	
	
	ModelAndView(model,view,clear mark)
	
	view.render(model)
	
ViewResolver(viewName,Local)

ViewResolverComposite:复合
BeanNameViewResolver:根据name从application取相应view类型的view
StaticViewResolver:唯一的view
ContentNegotiatingViewResolver(内容协议视图解析器)
	contentNegotiationManager:内容协议管理器
	cnmFactoryBean:内容协议工厂
	useNotAcceptableStatusCode:不接受标示【false,表示解析view没有返回NULL，true，表示解析view返回状态码406】
	406-Not Acceptable Response，返回一个Response要处理的view
	defaultViews:默认的视图
	viewResolvers:视图解析器
	
resolveViewName(String viewName, Locale locale)
1.request解析出客服端能接受MediaType(相应解析策略)
2.服务端支持的MediaType，*。最终匹配两方接受MediaType
3.根据viewName,local获取view,根据MediaType获取后缀
		view(viewName,view+suffix,defaultView)
		
bestView
1.RedirectView
2.解析view的ContentType成MediaType,然后兼容MediaType

AbstractCachingViewResolver 处理缓存问题，真正解析交给子类
	cacheLimit：缓存容量
	cacheUnresolved:缓存无法解析标示
	viewAccessCache:访问缓存（只会缓存cacheLimit）
	viewCreationCache:创建缓存（超过cacheLimit容量，存在viewCreationCache里面）
	
	createView
ResourceBundleViewResolver

UrlBasedViewResolver
	viewClass:
	prefix:前缀
	suffix:后缀
	contentType:内容类型
	redirectContextRelative：重定向相对Context标示
	redirectHttp10Compatible：兼容http10标示
	staticAttributes：静态属性
	exposePathVariables：暴露PathVariables标示
	exposeContextBeansAsAttributes：暴露ContextBeans作为属性
	viewNames:视图匹配名字
	requestContextAttribute:requestContext 的名字
	
	createView模板方法
	1.匹配视图匹配名字
	2.RedirectView（url,redirectContextRelative,redirectHttp10Compatible）【redirect:】
		1.必须以/开头 && redirectContextRelative 才会自动补充request.getContextPath()
		2.spring initializeBean生命周期还可以处理此对象
	3.InternalResourceView【forward:】
	4.加载其它视图

loadView
1.buildView()模板方法
	1.setURL(getPrefix() + viewName + getSuffix())
	2.setContentType
	3.setRequestContextAttribute
	4.setStaticAttributes
	5.setExposePathVariables
	6.暴露所有exposeContextBeansAsAttributes
加固定留给子类实现吧。

2.spring initializeBean生命周期还可以处理此对象

3.checkResource 交view自己实现

AbstractTemplateViewResolver
	buildView
	1.exposeRequestAttributes 暴露request参数标示
		allowRequestOverride：相同的名字，抛异常
	2.exposeSessionAttributes 暴露session参数标示
		allowSessionOverride：相同的名字，抛异常
	3.exposeSpringMacroHelpers 暴露SpringMacro 标示。里面有国际函数

VelocityViewResolver
	dateToolAttribute:时间工具名字
	numberToolAttribute：数据工具名字
	toolboxConfigLocation:工具名字  

	
View

AbstractView
contentType:内容类型

requestContextAttribute:RequestContext attribute of name

exposePathVariables:暴露pathVariables标示
staticAttributes:静态资源

exposeContextBeansAsAttributes:暴露ContextBeans标示
exposedContextBeanNames:

render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)
1.createMergedOutputModel
exposeStatic,exposePathVariables,exposeRequestContext
2.设置回执头
3.renderMergedOutputModel

RedirectView 模板方法
	1.createTargetUrl
		contextRelative&&/开头->补充request.getContextPath()
		replaceUriTemplateVariables，添加原始queryParam,exposeModelAttributes（注意model值）
	2.updateTargetUrl->RequestDataValueProcessor处理钩子
	3.flashMap方式
	4.跳转

InternalResourceView 模板方法
 	1.model设置到request里面
 	2.exposeHelpers
 	3.阻止数据循环
 	4.include,forward

FastJsonJsonView
	1.renderedAttributes?model
	2.ToJSON
AbstractTemplateView
	exposeRequestAttributes
	exposeSessionAttributes
	exposeSpringMacroHelpers
	applyContentType
	

		
	