retryPolicy：重试策略。执行失败，决定到底是否再执行(次数,时间)
backOffPolicy:补偿策略。在异常时，补偿操作(暂停一段时间)
listeners:重试监听
retryContextCache：重试上下文缓存


doExecute(RetryCallback<T, E> retryCallback,RecoveryCallback<T> recoveryCallback, RetryState state)
		retryCallback:重试操作
		recoveryCallback:恢复操作
		state:重试状态
		
1.retryPolicy.open初始化和注册retryContext(线程变量保存retryContext)
	retryPolicy对应相应retryContext
		1.state==null
		2.强制刷新
		3.retryContextCache不存在相应KEY
2.监听器生命周期open
3.backOffPolicy初始化backOffContext
		1.从retryContext得到
		2.backOffPolicy.start产生一个新的保存到retryContext
4.通过retryPolicy判断是否重试和状态（非强制刷新isExhaustedOnly）
		retryCallback重试操作
5.(如果成功结束，异常直接抛出)
6.异常
	     1.监听器生命周期onError
	     2.缓存RetryContext，注册异常（retryPolicy.registerThrowable，retryContext相应的值变化）
		 3.补偿处理，或者暂停几分钟
		 4.判断是否抛异常(rollbackFor) return;可以重新回到重试开始
7.如果疲惫状态，抛异常 return;
8.handleRetryExhausted
			1.删除缓存RetryContext
			2.重试失败恢复操作 return;
			3.抛出异常			 			
	 
