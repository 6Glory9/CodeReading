AbstractApplicationContext
	parent：父Application
	environment:环境变量
	beanFactoryPostProcessors:bean工厂处理器
	resourcePatternResolver:资源解析器
	lifecycleProcessor:应用生命周期处理器
	messageSource:
	applicationEventMulticaster:事件广播器
	applicationListeners:监听器
	earlyApplicationEvents:早期事件
	
	create:refresh()
		1.创建环境变量及验证
		2.创建获取beanFactory.refreshBeanFactory(),getBeanFactory()留给子类实现
		3.手动增加bean(ignoreDependencyInterface,registerResolvableDependency,addBeans)
		4.后处理BeanFactory,对Application一些特殊处理
		5.bean工厂处理器处理
		6.注册bean处理器
		7.初始化messageSource
		8.初始化事件广播器
		9.初始化特殊组件,留给子类实现
	 10.注册监听器
	 11.创建所有bean(weaverAwareName,setClassLoader(null),freezeConfiguration)
	 12.初始化lifecycleProcessor,释放事件(ContextRefreshedEvent) 
	 
GenericApplicationContext系列
		1.beanFactory提供一个默认beanFactory
		用:registerBeanDefinition重写-->把相应bean存在beanFactory，逆天想法
		
	  GenericXmlApplicationContext
	  	1.XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(this);
	  	读取配置文件注册最终调用GenericApplicationContext的注册方法，最终保存上层beanFactory
	  GenericWebApplicationContext
	  	1.增加servletContext,themeSource
	  	2.重写
	  		1.createEnvironment==>StandardServletEnvironment
	  		2.postProcessBeanFactory==>(ServletContextAwareProcessor,)
				
				EmbeddedWebApplicationContext	
						1.embeddedServletContainer:嵌入式容器
						2.servletConfig:配置
						3.重写
							1.refresh() 增加刷新失败停止嵌入式容器
							2.onRefresh() 创建嵌入式容器
							3.finishRefresh() 启动容器
							4.onClose()  增加停止嵌入式容器