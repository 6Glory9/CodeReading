分布式锁
1)可重入锁Shared Reentrant Lock
1.lock = new InterProcessMutex(client, lockPath);
2.!lock.acquire(time, unit)
3.lock.release();
4.attemptRevoke(CuratorFramework client,String path)==>撤回锁


ps:1.可重用的，你可以在一个线程中多次调用acquire,在线程拥有锁时它总是返回true
   2.推荐你使用ConnectionStateListener处理连接状态的改变。 当连接LOST时你不再拥有锁

2)不可重入锁Shared Lock ==>同一个线程锁两次就释放两次


3)可重入读写锁Shared Reentrant Read Write Lock
一个读写锁管理一对相关的锁。 一个负责读操作，另外一个负责写操作。 读操作在写锁没被使用时可同时由多个进程使用，
而写锁使用时不允许读 (阻塞)。 此锁是可重入的。一个拥有写锁的线程可重入读锁，但是读锁却不能进入写锁。
这也意味着写锁可以降级成读锁， 比如请求写锁 —>读锁 —->释放写锁
