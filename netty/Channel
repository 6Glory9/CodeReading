Channel
一、IO方法==>pipeline==>channelHanlder==>Unsafe==>channel
1.read()==>获取数据读到inbound缓冲区,ChannelHandler.channelRead,ChannelHandler.channelReadComplete
2.write()==>把msg写到环形数据中,然后flush方法写入到channel方法中
3.flush()==>写入channel方法中
4.close()==>关闭channel,ChannelHandler.close
5.disconnect()==>断开连接,ChannelHandler.disconnect
6.connect()==>客服端连接服务端,ChannelHandler.connect
7.bind()==>服务端绑定端口,ChannelHandler.bind
8.config()==>channel配置
9.isOpen(channel是否打开),isRegistered(注册EventLoop),isActive(是否激活)
二、其它常用方法
1.envetLoop()==>channel注册多路复用器
2.metaData()==>TCP 配置
3.parent()==>client parent(socketServerChannel),server(null)


AbstractNioChannel
1.doRegister
2.doBeginRead

AbstractNioByteChannel<==>AbstractNioMessageChannel
1.doWrite

NioSocketChannel
1.doConnect()
2.doBind()


AbstractNioMessageServerChannel
1.doReadMessages()
NioServerSocketChannel
1.doReadMessages()
2.doBind()


Unsafe
AbstractUnsafe
1.register()==>AbstractNioChannel.doRegister==>ChannelHandler.channelRegistered,ChannelHandler.channelActive
2.bind()==>NioSocketChannel|NioServerSocketChannel.doBind()
3.disconnect()==>NioSocketChannel.doConnect()
4.close()==>NioSocketChannel|NioServerSocketChannel.doClose()
5.write()==>add outboundBuffer
.......

AbstractNioUnsafe
NioByteUnsafe
1.read()
NioSocketChannelUnsafe










NioEventLoop.processSelectedKey(SelectionKey.isValid(close),connect,write,read)
1)AbstractUnsafe.close(close)
1.IF 渠道已经关闭,直接返回应得
2.设置outboundBuffer为null,阻止用户写数据
3.取消EventLoop的监听事件
4.关闭渠道操作
5.fireChannelInactiveAndDeregister两个事件

2)AbstractNioUnsafe.finishConnect(connect)
1.doFinishConnect
2.fireChannelActive

3)AbstractNioUnsafe.forceFlush(write)
1.IF inFlush0||outboundBuffer is null==>return
2.IF channel status is error ==>return
3.doWrite(outboundBuffer),后续编码操作


4)NioByteUnsafe.read(read)
1.read to byteBuf(RecvByteBufAllocator.Handle工具类)
2.pipeline.fireChannelRead(byteBuf) 读一次触发一次
3.pipeline.fireChannelReadComplete()
4.IF not read ,closeOnRead


DefaultChannelPipeline
Channel.write==>DefaultChannelPipeline==>TailContext==>AbstractUnsafe.write==>add outboundBuffer
1.filterOutboundMessage
2.add outboundBuffer