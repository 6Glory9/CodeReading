1.上下文切换
单CPU通过分配时间片，配合算法达到多线程操作。
CPU分配时间片时间内完成操作，如果任务还没有完成，保存当任务的状态，等待下次获取CPU，再次加载时间片。这个保存任务和加载任务过程叫做上下文切换。

2.多线程操作会开销(1.创建线程 2.上下文切换)，vmstat可以在linux系统测试线程切换次数
减少上下文切换方法：无锁并发编程、CAS算法、使用最少线程和使用协程。

2.1 空闲线程多，适当调整好线程数量
2.2 死锁
2.3 争抢全局资源(带宽，打印机，数据库连接)


3.synchronized
1.代码块实现monitorenter和monitorexit，monitorenter就是为尝试获取monitor对象

4.锁的状态
无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态,只能升级不能降级
4.1偏向锁

5.原子操作的三大问题
5.1ABA问题
AtomicStampedReference能解决ABA的问题
5.2循环时间长开销大
5.3只能保证一个共享变量的原子
PS:有意思的是除了偏向锁，JVM实现锁的方式都用了循环CAS，即当一个线程想进入同步块的时候使用循环CAS的方式来获取锁，当它退出同步块的时
候使用循环CAS释放锁。