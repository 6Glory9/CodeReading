ThreadPoolExecutor
runStateOf：获取运行状态；
workerCountOf：获取活动线程数；
ctlOf：获取状态和活动线程数的值。

Ex
1.workerCount<corePoolSize==>add core worker
2.add core worker success return
3.IF add worker fail,go on
	1.status>=SHUTDOWN都无法添加worker
	2.一种场景除外status=SHUTDOWN,firstTask=null,!workQueue.isEmpty,这时增加善后worker
	3.workder>CAPACITY|corePoolSize|maximumPoolSize
	4.生产线程失败

4.add workQueue
	1.由running thread 处理
	2.recheck status ,remove task
	3.worker=0,添加一个线程来处理
5.add workQueue fail==>add extends worker


addWorker(Runnable firstTask, boolean core)
1.check status>=SHUTDOWN都无法添加worker(有一种场景除外)
2.check CAPACITY
3.check run status && check Thread status
4.IF update largestPoolSize
5.worker run
6.IF addWorker fail
tryTerminate
	1.Running,TIDYING,TERMINATED|SHUTDOWN&&! workQueue.isEmpty()都不处理
	2.处理状态SHUTDOWN&&workQueue.isEmpty()|STOP
	3.有workers处理方式,中断一个workder
	4.terminated额外处理，update TIDYING,TERMINATED,触发termination.signalAll()


runWorker(Worker w)
1.新任务，队列的任务获取(getTask),IF task is null 线程要退出
2.check run status>=STOP
3.before
4.run
5.after
6.update worker.completedTasks


getTask()
1.check status(status>=SHUTDOWN,status=SHUTDOWN&&!workQueue.isEmpty()除外)==>null
2.check worker count(wc>maximumPoolSize|corePoolSize|timedOut|workQueue)==>null
3.update timeOut flag


processWorkerExit(w, completedAbruptly)
1.IF completedAbruptly,说明一次也没有执行过，做相应的更新
2.update completedTaskCount
3.tryTerminate
4.add 增加一个善后worker


shutdown()
1.check thread access
2.update status SHUTDOWN
3.update onlyOneFlag
4.onShutdown,没有处理定时任务有处理
5.手动触动tryTerminate==>interruptIdleWorkers|

shutdownNow()
1.check thread access
2.update status STOP
3.interruptWorkers，中断所有Work
4.提取没有完成任务
5.手动触动tryTerminate==>terminated